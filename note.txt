=>express()
Creates an Express application. The express() function is a top-level function exported by the express module.

var express = require('express')
var app = express()

=>Methods:

i.express.json([options]):
This middleware is available in Express v4.16.0 onwards.
This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.


ii.express.raw([options]):
This middleware is available in Express v4.17.0 onwards.
This is a built-in middleware function in Express. It parses incoming request payloads into a Buffer and is based on body-parser.

iii.express.text([options])
This middleware is available in Express v4.17.0 onwards.
This is a built-in middleware function in Express. It parses incoming request payloads into a string and is based on body-parser.

iv.express.urlencoded([options]):
This middleware is available in Express v4.16.0 onwards.
This is a built-in middleware function in Express. It parses incoming requests with urlencoded payloads and is based on body-parser.

v.express.static(root, [options]):
This is a built-in middleware function in Express. It serves static files and is based on serve-static.
The root argument specifies the root directory from which to serve static assets. The function determines the file to serve by combining req.url with the provided root directory. When a file is not found, instead of sending a 404 response, it calls next() to move on to the next middleware, allowing for stacking and fall-backs.

vi.express.Router([options]):
Creates a new router object.
var router = express.Router([options])
The optional options parameter specifies the behavior of the router.


=>Router:
A router object is an instance of middleware and routes. You can think of it as a “mini-application,” capable only of performing middleware and routing functions. Every Express application has a built-in app router.

A router behaves like middleware itself, so you can use it as an argument to app.use() or as the argument to another router’s use() method.

The top-level express object has a Router() method that creates a new router object.

Once you’ve created a router object, you can add middleware and HTTP method routes (such as get, put, post, and so on) to it just like an application. For example:

// invoked for any requests passed to this router
router.use(function (req, res, next) {
  // .. some logic here .. like any other middleware
  next()
})

// will handle any request that ends in /events
// depends on where the router is "use()'d"
router.get('/events', function (req, res, next) {
  // ..
})
You can then use a router for a particular root URL in this way separating your routes into files or even mini-apps.

// only requests to /calendar/* will be sent to our "router"
app.use('/calendar', router)
Keep in mind that any middleware applied to a router will run for all requests on that router’s path, even those that aren’t part of the router.

=> Application:
The app object conventionally denotes the Express application. Create it by calling the top-level express() function exported by the Express module:

const express = require('express')
const app = express()

app.get('/', (req, res) => {
  res.send('hello world')
})

app.listen(3000)

The app object has methods for:

i. HTTP requests; see for example, app.METHOD and app.param.
ii.Configuring middleware; see app.route.
iii.Rendering HTML views; see app.render.
iv.Registering a template engine; see app.engine.

=>Properties:
i.app.locals
The app.locals object has properties that are local variables within the application, and will be available in templates rendered with res.render.

console.dir(app.locals.title)
// => 'My App'

console.dir(app.locals.email)
// => 'me@myapp.com'
Once set, the value of app.locals properties persist throughout the life of the application, in contrast with res.locals properties that are valid only for the lifetime of the request.

You can access local variables in templates rendered within the application. This is useful for providing helper functions to templates, as well as application-level data. Local variables are available in middleware via req.app.locals (see req.app)

app.locals.title = 'My App'
app.locals.strftime = require('strftime')
app.locals.email = 'me@myapp.com'

ii.app.mountpath
The app.mountpath property contains one or more path patterns on which a sub-app was mounted.

A sub-app is an instance of express that may be used for handling the request to a route.

const express = require('express')

const app = express() // the main app
const admin = express() // the sub app

admin.get('/', (req, res) => {
  console.log(admin.mountpath) // /admin
  res.send('Admin Homepage')
})

app.use('/admin', admin) // mount the sub app
It is similar to the baseUrl property of the req object, except req.baseUrl returns the matched URL path, instead of the matched patterns.

If a sub-app is mounted on multiple path patterns, app.mountpath returns the list of patterns it is mounted on, as shown in the following example.

const admin = express()

admin.get('/', (req, res) => {
  console.log(admin.mountpath) // [ '/adm*n', '/manager' ]
  res.send('Admin Homepage')
})

const secret = express()
secret.get('/', (req, res) => {
  console.log(secret.mountpath) // /secr*t
  res.send('Admin Secret')
})

admin.use('/secr*t', secret) // load the 'secret' router on '/secr*t', on the 'admin' sub app
app.use(['/adm*n', '/manager'], admin) // load the 'admin' router on '/adm*n' and '/manager', on the parent app

=>Events:

mount:
app.on('mount', callback(parent))
The mount event is fired on a sub-app, when it is mounted on a parent app. The parent app is passed to the callback function.

=>NOTE:
Sub-apps will:

i.Not inherit the value of settings that have a default value. You must set the value in the sub-app.
ii.Inherit the value of settings with no default value.
For details, see Application settings.


const admin = express()

admin.on('mount', (parent) => {
  console.log('Admin Mounted')
  console.log(parent) // refers to the parent app
})

admin.get('/', (req, res) => {
  res.send('Admin Homepage')
})

app.use('/admin', admin)

=>Methods:

i.app.all():
ii.app.disable():
iii.app.enable():
iv.app.disabled():
v.app.enabled:
vi.app.get():
vii.app.get():
viii.app.set():
ix.app.listen:
x.app.METHOD():
xi.app.param():
xii.app.route():
xiii.app.path():


=>Template Engine:
A template engine is a tool that allows you to create HTML views dynamically by combining templates with data. Instead of writing static HTML, you use placeholders in a template file, and the template engine replaces these placeholders with real data before sending the final HTML to the client.

Here’s how it works:

Templates: These are files (like .ejs, .pug, .hbs) that contain a mix of HTML and placeholders for data. The placeholders can represent variables, loops, conditions, etc.

Data: This is the dynamic content that will be injected into the placeholders in the template. For example, user names, product details, or blog post content.

Rendering: The template engine takes the template and the data, combines them, and generates the final HTML output. This HTML is then sent to the client’s browser.

Key Benefits
Reusability: You can create templates for common layouts (like headers, footers, and navigation) and reuse them across multiple pages.
Separation of Concerns: Keeps your application logic (in JavaScript) separate from the presentation layer (HTML).
Easier Maintenance: Updating the layout or content in one template automatically applies to all pages that use that template.
Example with EJS
In EJS, you might have a template like this:

html
Copy code
<h1>Welcome, <%= userName %>!</h1>
<ul>
  <% users.forEach(user => { %>
    <li><%= user.name %></li>
  <% }); %>
</ul>
Here:

<%= %> is used to output variables (like userName).
<% %> is used for logic, like looping through users and rendering each user’s name.
When the template engine receives data like { userName: "Alice", users: [{ name: "Bob" }, { name: "Charlie" }] }, it will generate the final HTML:

html
Copy code
<h1>Welcome, Alice!</h1>
<ul>
  <li>Bob</li>
  <li>Charlie</li>
</ul>
Popular Template Engines
EJS (Embedded JavaScript): Simple, with syntax close to JavaScript.
Pug: Minimal syntax, uses indentation rather than brackets.
Handlebars: Logic-less templates, great for simple data binding.
Would you like more examples on how to integrate a template engine in Express.js?

=>Request Object:

The req object represents the HTTP request and has properties for the request query string, parameters, body, HTTP headers, and so on. In this documentation and by convention, the object is always referred to as req (and the HTTP response is res) but its actual name is determined by the parameters to the callback function in which you’re working.

For example:

app.get('/user/:id', (req, res) => {
  res.send(`user ${req.params.id}`)
})
But you could just as well have:

app.get('/user/:id', (request, response) => {
  response.send(`user ${request.params.id}`)
})
The req object is an enhanced version of Node’s own request object and supports all built-in fields and methods.

=>Properties:
i.req.baseUrl:
ii.req.originalUrl:
iii.req.path:
iv.req.url:
v.req.hostname:
vi.req.ip:
vii.req.method:
viii.req.protocol:
ix.req.params:
x.req.query:
xi.req.body:
xii.req.cookies:
xiii.req.signedCookies:
xiv.req.secure:
xv.req.app:
xvi.req.route:

=>Methods:

i.req.accepts():
ii.req.get():
iii.req.param(): deprecated


=>Response Object:
The res object represents the HTTP response that an Express app sends when it gets an HTTP request.

In this documentation and by convention, the object is always referred to as res (and the HTTP request is req) but its actual name is determined by the parameters to the callback function in which you’re working.

For example:

app.get('/user/:id', (req, res) => {
  res.send(`user ${req.params.id}`)
})
But you could just as well have:

app.get('/user/:id', (request, response) => {
  response.send(`user ${request.params.id}`)
})
The res object is an enhanced version of Node’s own response object and supports all built-in fields and methods.

=>Properties:

i.res.app:
ii.res.headerSent:
iii.res.locals:

=>Methods:
i.res.json():
ii.res.end():
iii.res.status():
iv.res.statusCode():
v.res.format():
vi.res.send():
viii.res.location():
ix.res.cookies():
x.res.redirect():
xi.res.set():
x.res.get():


=>Middleware:

Middleware functions are functions that have access to the request object (req), the response object (res), and the next middleware function in the application’s request-response cycle. The next middleware function is commonly denoted by a variable named next.

Middleware functions can perform the following tasks:

i.Execute any code.
ii.Make changes to the request and the response objects.
iii.End the request-response cycle.
iv.Call the next middleware function in the stack.
v.  It can throw and catch error

If the current middleware function does not end the request-response cycle, it must call next() to pass control to the next middleware function. Otherwise, the request will be left hanging.

An Express application can use the following types of middleware:

i.Application-level middleware
ii.Router-level middleware
iii.Error-handling middleware
iv.Built-in middleware
v.Third-party middleware

=>Router:
A router object is an instance of middleware and routes. You can think of it as a “mini-application,” capable only of performing middleware and routing functions. Every Express application has a built-in app router.

A router behaves like middleware itself, so you can use it as an argument to app.use() or as the argument to another router’s use() method.

The top-level express object has a Router() method that creates a new router object.

Once you’ve created a router object, you can add middleware and HTTP method routes (such as get, put, post, and so on) to it just like an application. For example:

// invoked for any requests passed to this router
router.use((req, res, next) => {
  // .. some logic here .. like any other middleware
  next()
})

// will handle any request that ends in /events
// depends on where the router is "use()'d"
router.get('/events', (req, res, next) => {
  // ..
})
You can then use a router for a particular root URL in this way separating your routes into files or even mini-apps.

// only requests to /calendar/* will be sent to our "router"
app.use('/calendar', router)
Keep in mind that any middleware applied to a router will run for all requests on that router’s path, even those that aren’t part of the router.

=>Methods:

i.router.all()
ii.router.METHOD()
iii.router.param()
iv.router.route()
v.router.use() 


